{
	// Place your competitive-programming-cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"AtCoder": {
		"scope": "cpp",
		"prefix": "atcoder",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#include <atcoder/all>",
			"using namespace atcoder;",
			"",
			"using ll = long long;",
			"#define rep(i, n) for (ll i = 0; i < (n); i++)",
			"",
			"int main() {",
			"    $0",
			"",
			"    return 0;",
			"}"
		]
	},
	"AOJ": {
		"scope": "cpp",
		"prefix": "aoj",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"using ll = long long;",
			"#define rep(i, n) for (ll i = 0; i < (n); i++)",
			"",
			"int main() {",
			"    $0",
			"",
			"    return 0;",
			"}"
		]
	},
	"INF": {
		"scope": "cpp",
		"prefix": "INF",
		"body": [
			"const ll INF = 1'000'000'000'000'000'000;",
		]
	},
	"chmin": {
		"scope": "cpp",
		"prefix": "chmin",
		"body": [
			"template<class T> inline bool chmin(T& a, T b) {",
			"    if (a > b) {",
			"        a = b;",
			"        return true;",
			"    }",
			"    return false;",
			"}",
		]
	},
	"chmax": {
		"scope": "cpp",
		"prefix": "chmax",
		"body": [
			"template<class T> inline bool chmax(T& a, T b) {",
			"    if (a < b) {",
			"        a = b;",
			"        return true;",
			"    }",
			"    return false;",
			"}",
		]
	},
}
